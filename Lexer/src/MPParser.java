
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Dec 26 19:09:45 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Sun Dec 26 19:09:45 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\004\000\002\003\006\000\002\004" +
    "\006\000\002\022\004\000\002\022\003\000\002\023\005" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\011\000\002\010\004\000\002\010" +
    "\003\000\002\010\003\000\002\010\002\000\002\011\004" +
    "\000\002\011\003\000\002\012\010\000\002\013\005\000" +
    "\002\021\005\000\002\021\003\000\002\020\003\000\002" +
    "\020\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\004\005\001\002\000\004\002\100\001" +
    "\002\000\004\015\006\001\002\000\004\016\007\001\002" +
    "\000\004\013\010\001\002\000\010\005\016\006\015\007" +
    "\014\001\002\000\004\002\000\001\002\000\004\030\076" +
    "\001\002\000\014\005\ufffd\006\ufffd\007\ufffd\010\ufffd\030" +
    "\ufffd\001\002\000\004\030\ufffa\001\002\000\004\030\ufff9" +
    "\001\002\000\004\030\ufffb\001\002\000\014\005\016\006" +
    "\015\007\014\010\024\030\026\001\002\000\006\014\ufff6" +
    "\025\ufff6\001\002\000\014\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\030\ufffe\001\002\000\006\014\074\025\073\001\002" +
    "\000\006\014\ufff5\025\ufff5\001\002\000\004\015\036\001" +
    "\002\000\006\014\ufff7\025\ufff7\001\002\000\004\027\027" +
    "\001\002\000\012\030\031\031\030\032\034\033\032\001" +
    "\002\000\024\014\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\001\002\000\024\014" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\001\002\000\024\014\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\001\002\000\006\014\uffde\025\uffde\001\002\000\024\014" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\001\002\000\024\014\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\001\002\000\012\030\031\031\030\032\034\033\032\001" +
    "\002\000\004\016\051\001\002\000\020\016\uffea\017\044" +
    "\020\045\021\047\022\042\023\043\024\046\001\002\000" +
    "\012\030\031\031\030\032\034\033\032\001\002\000\012" +
    "\030\uffe1\031\uffe1\032\uffe1\033\uffe1\001\002\000\012\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\001\002\000\012\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\001\002\000\012\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\001\002\000\012\030\uffdf\031\uffdf" +
    "\032\uffdf\033\uffdf\001\002\000\012\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\001\002\000\004\016\uffeb\001\002\000\004" +
    "\026\052\001\002\000\004\013\010\001\002\000\012\011" +
    "\060\012\055\014\ufff0\025\ufff0\001\002\000\012\011\060" +
    "\012\055\014\ufff2\025\ufff2\001\002\000\004\026\067\001" +
    "\002\000\006\014\ufff4\025\ufff4\001\002\000\006\014\ufff1" +
    "\025\ufff1\001\002\000\004\015\062\001\002\000\012\011" +
    "\uffee\012\uffee\014\uffee\025\uffee\001\002\000\012\030\031" +
    "\031\030\032\034\033\032\001\002\000\004\016\064\001" +
    "\002\000\004\026\065\001\002\000\004\013\010\001\002" +
    "\000\012\011\uffed\012\uffed\014\uffed\025\uffed\001\002\000" +
    "\004\013\010\001\002\000\006\014\uffec\025\uffec\001\002" +
    "\000\006\014\ufff3\025\ufff3\001\002\000\012\011\uffef\012" +
    "\uffef\014\uffef\025\uffef\001\002\000\006\010\024\030\026" +
    "\001\002\000\014\002\uffff\011\uffff\012\uffff\014\uffff\025" +
    "\uffff\001\002\000\006\014\ufff8\025\ufff8\001\002\000\004" +
    "\025\077\001\002\000\014\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\030\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\076\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\010\017\011\022\016\023\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\005\021\006" +
    "\024\007\022\015\017\017\011\023\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\034\020\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\034\020\037\021" +
    "\036\001\001\000\002\001\001\000\004\014\040\001\001" +
    "\000\006\016\034\020\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\052\001\001\000\012\010\055\011\053" +
    "\012\060\013\056\001\001\000\006\012\071\013\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\034\020" +
    "\037\021\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\065\001\001\000\002\001\001\000\004\004" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\074\007\022\015\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }


	public int errNo = 0;
	public int warnNo = 0;
	SymbolTable symbolTable;
   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader(args[0]);
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo==0 && parser.warnNo==0 )
		   System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }
   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name + 
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }
   public void syntax_error(Symbol cur_token)
   {
   	  
   }
   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }
   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Assignment ::= ID ASSIGN Term 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			  Variable var = parser.symbolTable.getVar( ime );
			   System.out.println(ime);
		      if ( var == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else
				 {
		         var.last_def = parser.getLine();
		         if ( var.type.tkind != tip.tkind || (tip.tkind != Type.INTEGER && var.type.tkind!= Type.DOUBLE))
		         {
		            System.out.println( "Greska u liniji " + parser.getLine() + 
		      		   ": Neslaganje tipa u naredbi dodele." );
		      	    parser.errNo++;
		         }
		         }
             System.out.println( "Redukcija po smeni 31." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RelOp ::= NOTEQUAL 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 30." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RelOp ::= EQUAL 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 29." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RelOp ::= GREATEROREQUAL 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 28." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RelOp ::= GREATERTHAN 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 27." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RelOp ::= LESSOREQUAL 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 26." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RelOp ::= LESSTHAN 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 25." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Konstanta ::= BOOLEANCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant( parser.symbolTable.getType( "boolean" ), c );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Konstanta ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant( parser.symbolTable.getType( "real" ), c );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Konstanta ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant( parser.symbolTable.getType( "int" ), c );
              
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Konstanta 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              RESULT = k.type;
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Term ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() + 
		      		": promenljiva " + ime + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else
			  {
				RESULT = var.type;
		      	if ( var.last_def == -1 )
		      	{
		      		System.out.println( "Greska u liniji " + parser.getLine() + 
		      			": promenljiva " + ime + " nije inicijalizovana.");
		      		parser.errNo++;
		      	}
				 var.last_use= parser.getLine();
			    }
              System.out.println( "Redukcija po smeni 23." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RelExpression ::= Term 
            {
              Type RESULT = null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		      if ( tip.tkind != Type.BOOLEAN )
              {
              	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	   "U zagradama moze stojati samo boolean promenljiva " + 
              	   tip.name );
              	parser.errNo++;
              }
              RESULT = parser.symbolTable.getType( "boolean" );
              System.out.println( "Redukcija po smeni 22." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RelExpression ::= Term RelOp Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			 if ( i1.tkind != Type.INTEGER || i2.tkind != Type.INTEGER ||  i1.tkind != Type.DOUBLE || i2.tkind != Type.DOUBLE)
              {
              	System.out.println("Greska u liniji " + parser.getLine() + ": " + 
              	   "Relacioni operatori se ne moze primeniti nad operandima tipa " + 
              	   i1.name + " i " + i2.name );
              	parser.errNo++;
              }
             RESULT = parser.symbolTable.getType( "boolean" );
             System.out.println( "Redukcija po smeni 21." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ElseStatement ::= ELSE COLON Block 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 20." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ElseStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Elif ::= ELIF LEFTPAR RelExpression RIGHTPAR COLON Block 
            {
              Object RESULT = null;
		
             System.out.println( "Redukcija po smeni 19." );
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*Elif*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ElifList ::= Elif 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 18." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ElifList ::= ElifList Elif 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 17." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*ElifList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ElsePart ::= 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni E." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ElsePart ::= ElseStatement 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 16." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ElsePart ::= ElifList 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 15." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ElsePart ::= ElifList ElseStatement 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 14." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*ElsePart*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IfStatement ::= IF LEFTPAR RelExpression RIGHTPAR COLON Block ElsePart 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 13." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*IfStatement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= IfStatement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 12." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 11." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 10." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Statements ::= Statements SEMICOLON Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 9." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Typ ::= BOOLEAN 
            {
              Type RESULT = null;
		
				RESULT = parser.symbolTable.getType( "boolean" );
                System.out.println( "Redukcija po smeni 8." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Typ*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Typ ::= REAL 
            {
              Type RESULT = null;
		
				RESULT = parser.symbolTable.getType( "real" );
                System.out.println( "Redukcija po smeni 7." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Typ*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Typ ::= INT 
            {
              Type RESULT = null;
		
				RESULT = parser.symbolTable.getType( "int" );
                System.out.println( "Redukcija po smeni 6." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Typ*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Variable ::= Typ ID SEMICOLON 
            {
              String RESULT = null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
					  if ( ! parser.symbolTable.addVar( ime, tip ) )
					   {
					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
                    System.out.println( "Redukcija po smeni 5." );
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*Variable*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Variables ::= Variable 
            {
              ArrayList RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
				String celoIme = (String) name;
				System.out.println(name);
			    String[] ime= celoIme.split(" ", 2);
				ime[1].replaceAll(";","");
				RESULT = new ArrayList();
                RESULT.add( ime[0] );
                System.out.println( "Redukcija po smeni 4." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Variables ::= Variables Variable 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
				System.out.println(niz);
				Type t = parser.symbolTable.getType( "unknown" );
					for ( int i=0; i<niz.size(); i++ )
					{
					   String celoIme = (String) niz.get(i);
					   System.out.println(celoIme);
					   String[] ime= celoIme.split(" ", 2);
  					   ime[1].replaceAll(";","");
					   if(ime[1]=="int")
							t=parser.symbolTable.getType( "int" );
						else if(ime[1]=="real")
								t=parser.symbolTable.getType( "real" );
							 else if(ime[1]=="boolean")
								     t=parser.symbolTable.getType( "boolean" );
					   if ( ! parser.symbolTable.addVar( ime[1], t ) )
					   {
					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " + 
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
					   }
				     }  
				String i=(String) name;
				String[] n= i.split(" ", 2);
				RESULT = niz;
			 	RESULT.add( n[1] );
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Variables*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= LEFTBLOCK Variables Statements RIGHTBLOCK 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 2." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

