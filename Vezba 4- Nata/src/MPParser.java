
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed Dec 29 04:33:06 CET 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Wed Dec 29 04:33:06 CET 2021
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\003\005\000\002\002\004\000\002\005" +
    "\006\000\002\017\004\000\002\017\003\000\002\004\006" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\007\005\000\002\007\003\000\002" +
    "\006\003\000\002\006\003\000\002\010\005\000\002\014" +
    "\003\000\002\014\006\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\015\003\000\002\015\003\000" +
    "\002\013\012\000\002\016\003\000\002\016\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\004\005\001\002\000\004\002\065\001" +
    "\002\000\004\012\007\001\002\000\004\025\064\001\002" +
    "\000\004\027\010\001\002\000\004\022\055\001\002\000" +
    "\006\014\ufffd\027\ufffd\001\002\000\006\014\014\027\013" +
    "\001\002\000\006\022\055\023\026\001\002\000\004\020" +
    "\046\001\002\000\006\013\ufff4\024\ufff4\001\002\000\006" +
    "\013\ufff6\024\ufff6\001\002\000\006\013\ufff5\024\ufff5\001" +
    "\002\000\006\013\023\024\022\001\002\000\006\014\ufffe" +
    "\027\ufffe\001\002\000\006\014\014\027\024\001\002\000" +
    "\010\013\uffff\024\uffff\025\uffff\001\002\000\004\023\026" +
    "\001\002\000\006\013\ufff7\024\ufff7\001\002\000\012\026" +
    "\034\027\031\030\027\031\035\001\002\000\014\013\uffea" +
    "\016\uffea\017\uffea\021\uffea\024\uffea\001\002\000\012\013" +
    "\uffee\016\uffee\017\uffee\024\uffee\001\002\000\014\013\uffed" +
    "\016\uffed\017\uffed\021\uffed\024\uffed\001\002\000\006\013" +
    "\ufff3\024\ufff3\001\002\000\014\013\uffec\016\uffec\017\uffec" +
    "\021\uffec\024\uffec\001\002\000\004\020\043\001\002\000" +
    "\014\013\uffe9\016\uffe9\017\uffe9\021\uffe9\024\uffe9\001\002" +
    "\000\012\013\ufff2\016\037\017\040\024\ufff2\001\002\000" +
    "\010\027\031\030\027\031\035\001\002\000\010\027\031" +
    "\030\027\031\035\001\002\000\012\013\uffef\016\uffef\017" +
    "\uffef\024\uffef\001\002\000\012\013\ufff0\016\ufff0\017\ufff0" +
    "\024\ufff0\001\002\000\010\027\031\030\027\031\035\001" +
    "\002\000\004\021\045\001\002\000\006\013\ufff1\024\ufff1" +
    "\001\002\000\004\027\047\001\002\000\004\015\050\001" +
    "\002\000\004\027\051\001\002\000\004\021\052\001\002" +
    "\000\004\007\053\001\002\000\004\012\007\001\002\000" +
    "\006\013\uffeb\024\uffeb\001\002\000\012\005\061\006\057" +
    "\010\056\011\062\001\002\000\004\024\ufffb\001\002\000" +
    "\004\024\ufff9\001\002\000\004\024\063\001\002\000\004" +
    "\024\ufff8\001\002\000\004\024\ufffa\001\002\000\006\014" +
    "\ufffc\027\ufffc\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\005\005\001\001\000\002\001\001\000\006\004\010" +
    "\017\011\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\020\006\015\007\017\010\016\013\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\024\010\016\013\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\035\014\031\015\027\016\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\041\016\032\001\001\000\006" +
    "\015\040\016\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\015\043\016\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\053\001\001\000\002\001\001\000\004\011\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   e.printStackTrace();
	  }
   }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Konstanta ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant(parser.symbolTable.getType( "char" ), c);
                 System.out.println( "Redukcija po smeni 26." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Konstanta ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                 RESULT = new Constant(parser.symbolTable.getType( "integer" ), c);
                 System.out.println( "Redukcija po smeni 25." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*Konstanta*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ReadExpression ::= READ LEFTPAR ID IN ID RIGHTPAR DO Block 
            {
              Type RESULT = null;
		int ime1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).left;
		int ime1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).right;
		String ime1 = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-5)).value;
		int ime2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int ime2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime2 = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
                    Variable var1 = parser.symbolTable.getVar(ime1);
                    Variable var2 = parser.symbolTable.getVar(ime2);
		    if ( var1 == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime1 + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else
		         var1.last_def = parser.getLine();
                      if ( var2 == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime2 + " nije deklarisana.");
		      	parser.errNo++;
		      }
		      else
		         var2.last_def = parser.getLine();

                      System.out.println( "Redukcija po smeni 24." );
		
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*ReadExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PrimaryExpression ::= Konstanta 
            {
              Type RESULT = null;
		int kleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant k = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                        RESULT = k.type;
                        System.out.println( "Redukcija po smeni 23." );
                     
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*PrimaryExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PrimaryExpression ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     Variable var = parser.symbolTable.getVar(ime);
                     if ( var == null )
                     {
                         System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije deklarisana.");
                         parser.errNo++;
                         RESULT = parser.symbolTable.getType("unknown" );
                     }
                     else
                     {
                         RESULT = var.type;
                         if ( var.last_def == -1 )
                         {
                         System.out.println("Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije inicijalizovana.");
                         parser.errNo++;
                         }
                         var.last_use = parser.getLine();
                     }
                     System.out.println( "Redukcija po smeni 22." );
                 
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*PrimaryExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ArithmeticExpression ::= PrimaryExpression 
            {
              Type RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		                      
						if (i.tkind != Type.INTEGER )
                     {
                         System.out.println("Ggreska u liniji " + parser.getLine() + ": " + "Operator + se ne moze primeniti nad operandima tipa " + i.name);
                         parser.errNo++;
                         RESULT=parser.symbolTable.getType("unknown");
                     }
                     else
                     {
                         RESULT=i;
                     }
                       //RESULT = i;
                       System.out.println( "Redukcija po smeni 21." );
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ArithmeticExpression ::= ArithmeticExpression MINUS PrimaryExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     if (i1.tkind != Type.INTEGER || i2.tkind != Type.INTEGER)
                     {
                         System.out.println("Ggreska u liniji " + parser.getLine() + ": " + "Operator - se ne moze primeniti nad operandima tipa " + i1.name + " i " + i2.name);
                         parser.errNo++;
                         RESULT=parser.symbolTable.getType("unknown");
                     }
                     else
                     {
                         RESULT=parser.symbolTable.getType("integer");
                     }                       
                     System.out.println( "Redukcija po smeni 20." );
                    
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ArithmeticExpression ::= ArithmeticExpression PLUS PrimaryExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
						
                     if (i1.tkind != Type.INTEGER || i2.tkind != Type.INTEGER)
                     {
                         System.out.println("Ggreska u liniji " + parser.getLine() + ": " + "Operator + se ne moze primeniti nad operandima tipa " + i1.name + " i " + i2.name);
                         parser.errNo++;
                         RESULT=parser.symbolTable.getType("unknown");
                     }
                     else
                     {
                         RESULT=parser.symbolTable.getType("integer");
                     }
                     
                     System.out.println("Redukcija po smeni 19.");
                     
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithmeticExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Expression ::= OPEN LEFTPAR PrimaryExpression RIGHTPAR 
            {
              Type RESULT = null;
		
              //RESULT = i;
              System.out.println( "Redukcija po smeni 18." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Expression ::= ArithmeticExpression 
            {
              Type RESULT = null;
		
              //RESULT = i;
              System.out.println( "Redukcija po smeni 17." );
           
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Assignment ::= ID ASSIGN Expression 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
             Variable var = parser.symbolTable.getVar(ime);
             if (var == null)
             {
                 System.out.println( "Greska u liniji " + parser.getLine() + ": promenljiva " + ime + " nije deklarisana.");
                 parser.errNo++;
                 RESULT = parser.symbolTable.getType( "unknown" );
             }
              else
                    {
		         var.last_def = parser.getLine();
		        // if (var.type.tkind != i.tkind)
		        // {
		        //    System.out.println( "Greska u liniji " + parser.getLine() +	": Neslaganje tipa u naredbi dodele."+ ime );
		      	 //   parser.errNo++;
		        // }
                        // else
                        // {
                            RESULT = var.type.tkind;
                        // }
                     }
               System.out.println( "Redukcija po smeni 14." );

             
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Assignment*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Statement ::= ReadExpression 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 13." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Statement ::= Assignment 
            {
              Object RESULT = null;
		
            System.out.println( "Redukcija po smeni 12." );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Statements ::= Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 11." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Statements ::= Statements SEMI Statement 
            {
              Object RESULT = null;
		
           System.out.println( "Redukcija po smeni 10." );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Statements*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tip ::= FILE 
            {
              Type RESULT = null;
		
                RESULT = parser.symbolTable.getType( "file" );
                System.out.println( "Redukcija po smeni 9." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Tip ::= STRING 
            {
              Type RESULT = null;
		
                RESULT = parser.symbolTable.getType( "string" );
                System.out.println( "Redukcija po smeni 8." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Tip ::= CHAR 
            {
              Type RESULT = null;
		
                RESULT = parser.symbolTable.getType( "char" );
                System.out.println( "Redukcija po smeni 7." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Tip ::= INTEGER 
            {
              Type RESULT = null;
		
                RESULT = parser.symbolTable.getType( "integer" );
                System.out.println( "Redukcija po smeni 6." );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Tip*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Var ::= ID COLON Tip SEMI 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                     
                     if (!parser.symbolTable.addVar(ime,t))
                         {
                             System.out.println("Greska u liniji " + parser.getLine() + ": " + "Promenljiva " + ime + " je vec deklarisana." );
                             parser.errNo++;
                         }

                     //if (t.tkind == Type.INTEGER)
                     //   RESULT = parser.symbolTable.getType("integer");
                     //if (t.tkind == Type.FILE)
                     //  RESULT = parser.symbolTable.getType("file");
                     System.out.println( "Redukcija po smeni 5." );
                 
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarList ::= Var 
            {
              Object RESULT = null;
		
              System.out.println( "Redukcija po smeni 4." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarList ::= VarList Var 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 3." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= BEGIN VarList Statements END 
            {
              Object RESULT = null;
		
                System.out.println( "Redukcija po smeni 2." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM Block RETURN 
            {
              Object RESULT = null;
		
               System.out.println( "Redukcija po smeni 1." );
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

